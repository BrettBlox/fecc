{"version":3,"sources":["css/global.css"],"names":[],"mappingsfile":"global.99a46257.css","sourceRoot":"..","sourcesContent":["/**\n * FONT FACE\n */\n@import url('https://fonts.googleapis.com/css?family=Lato:400,400i,700,900&display=swap');\n/**\n  * VARIABLES\n  */\n:root {\n  --color-day-bg: #0984e3;\n  --color-day-icon: #ffe4a1;\n  --color-night-bg: #032b43;\n  --color-night-icon: #b9c6d3;\n  --color-light: #ffffff;\n  --color-dark: #4a4a4a;\n  --color-charcoal: #252525;\n  --color-shadow-light: rgba(48, 48, 48, 0.15);\n  --color-shadow-mid: rgba(0, 0, 0, 0.25);\n  --color-shadow-dark: rgba(0, 0, 0, 0.9);\n  --font-base-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell,\n    'Helvetica Neue', sans-serif;\n  --font-label-family: 'Lato', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell,\n    'Helvetica Neue', sans-serif;\n  --metric-toggle-thumb-size: 1.4rem;\n  --metric-toggle-thumb-space: 0.25rem;\n  --metric-toggle-icon-space: 0.4rem;\n  --transition-snappy-duration: 500ms;\n  --transition-silky-duration: 200ms;\n  --transition-icon: opacity var(--transition-snappy-duration) ease,\n    transform var(--transition-silky-duration) cubic-bezier(1, 0, 0.55, 0.85);\n  --transition-delay-icon: 1000ms;\n}\n\n/**\n  * GLOBAL STYLES\n  */\nbody {\n  background: var(--color-light);\n  color: var(--color-charcoal);\n  font-family: var(--font-base-family);\n  display: grid;\n  place-items: center;\n}\nbody.dark {\n  background: var(--color-charcoal);\n  color: var(--color-light);\n}\n\n.toggle {\n  font-family: var(--font-label-family);\n  line-height: 1;\n  font-weight: 900;\n  text-transform: uppercase;\n  position: relative;\n}\n\n.toggle:not([hidden]) {\n  display: flex;\n  align-items: center;\n}\n\n/* \n The toggle__element is our checkbox. Notice, instead of using the typical .visually-hidden utility class, \n we‚Äôre hiding it by setting the opacity to 0 and using position: absolute to center it vertically and sit it on top of \n the upcoming decorative switch. This approach helps with discoverability on certain devices. \n */\n.toggle__element {\n  opacity: 0;\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  right: var(--metric-toggle-thumb-size);\n  width: 1em;\n  height: 1em;\n}\n\n/* \n -I‚Äôm setting the background with a scoped custom property: --color-toggle-decor-bg. This means that in state changes, \n I can just update that, rather than setting the background property again.\n \n -I‚Äôm setting box-sizing: content-box; because I want my border to push out, rather than be accounted for with dimensions that are set. \n \n -Notice how I‚Äôm setting metrics relative to --metric-toggle-thumb-size and --metric-toggle-thumb-space. \n This helps to simplify our state changes and generally creates are more harmonious user interface. \n */\n.toggle__decor {\n  --color-toggle-decor-bg: var(--color-day-bg);\n\n  display: block;\n  position: relative;\n  overflow: hidden;\n  width: calc((var(--metric-toggle-thumb-size) * 2) + (var(--metric-toggle-thumb-space) * 2));\n  height: calc(var(--metric-toggle-thumb-size) + (var(--metric-toggle-thumb-space) * 2));\n  background: var(--color-toggle-decor-bg);\n  margin-left: 0.5rem;\n  border-radius: var(--metric-toggle-thumb-size);\n  transition: background var(--transition-snappy-duration);\n  transition-delay: var(--transition-snappy-duration);\n  box-sizing: content-box;\n  border: 1px solid var(--color-light);\n}\n\n/* \n -As you can see, I‚Äôm setting the styles with the consistent Custom Properties here, too. I‚Äôm also adding a will-change: transform property, \n which gives the browser a little heads up that this thing will very likely change. This can have a positive impact on repaints.\n \n -After this, I set a ::before pseudo-element which will be our focus style. This is why I used grid on the thumb itself üòâ. \n As you can see, it‚Äôs hidden by default and we‚Äôll toggle that as the checkbox is focused, later on. \n */\n.toggle__thumb {\n  display: grid;\n  place-items: center;\n  width: var(--metric-toggle-thumb-size);\n  height: var(--metric-toggle-thumb-size);\n  border-radius: var(--metric-toggle-thumb-size);\n  background: linear-gradient(229.84deg, rgba(255, 255, 255, 0) 14.29%, rgba(48, 48, 48, 0.15) 81.82%), #ffffff;\n  color: var(--color-day-icon);\n  box-shadow: 0 0 var(--metric-toggle-thumb-space) var(--color-shadow-mid);\n  position: absolute;\n  top: var(--metric-toggle-thumb-space);\n  left: var(--metric-toggle-thumb-space);\n  transform: none;\n  transition: transform var(--transition-silky-duration) cubic-bezier(1, 0, 0.55, 0.85);\n  will-change: transform;\n  z-index: 1;\n}\n\n.toggle__thumb::before {\n  content: '';\n  display: none;\n  width: calc(var(--metric-toggle-thumb-size) - var(--metric-toggle-thumb-space));\n  height: calc(var(--metric-toggle-thumb-size) - var(--metric-toggle-thumb-space));\n  border: 2px solid var(--color-dark);\n  border-radius: calc(var(--metric-toggle-thumb-size) - var(--metric-toggle-thumb-space));\n}\n\n/* \n What we‚Äôre doing here is vertically centering and sizing the icons together, then branching of into [data-state] selectors \n to set colours and horizontal positioning. The [data-state=\"checked\"] state has the transform overridden because by default, it‚Äôs hidden. \n We also want it to transition downwards when it comes into view, which is why we use a negative rem value. \n */\n.toggle__icon {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  font-size: 0.9em;\n}\n\n.toggle__icon[data-state='checked'] {\n  left: var(--metric-toggle-icon-space);\n  fill: var(--color-night-icon);\n  opacity: 0;\n  transform: translateY(-1rem);\n}\n\n.toggle__icon[data-state='un-checked'] {\n  right: var(--metric-toggle-icon-space);\n  fill: var(--color-day-icon);\n  transition: var(--transition-icon);\n  transition-delay: var(--transition-delay-icon);\n}\n\n/* \n Here‚Äôs a little interactive trick here for you. We nudge the thumb in the direction of the next state with these blocks. \n This means that if you‚Äôre in the off state, it‚Äôll nudge to the right. It‚Äôs super subtle, but super useful. \n */\n.toggle__decor:hover .toggle__thumb {\n  margin-left: 1px;\n}\n\n:checked + .toggle__decor:hover .toggle__thumb {\n  margin-left: -1px;\n}\n\n/* \n The first thing we do is set that --color-toggle-decor-bg.\n We shift the thumb using transform. This is a super performant way of doing CSS transitions because transform doesn‚Äôt affect layout, \n thus the browser doesn‚Äôt have to make expensive calculations about surrounding elements. \n The browser will often use the GPU to perform the transition too, which means they are super silky.\n We switch the icons around so the moon drops in. Now, when we un-check, the sun with ‚Äúrise‚Äù. Fancy, huh? \n */\n:checked + .toggle__decor {\n  --color-toggle-decor-bg: var(--color-night-bg);\n}\n\n:checked + .toggle__decor .toggle__thumb {\n  transform: translateX(var(--metric-toggle-thumb-size)) rotate(270deg);\n  box-shadow: 0 0 var(--metric-toggle-thumb-space) var(--color-shadow-dark);\n}\n\n:checked + .toggle__decor .toggle__icon[data-state='checked'] {\n  opacity: 1;\n  transform: translateY(-50%);\n  transition: var(--transition-icon);\n  transition-delay: var(--transition-delay-icon);\n}\n\n:checked + .toggle__decor .toggle__icon[data-state='un-checked'] {\n  opacity: 0;\n  transform: translateY(1rem);\n  transition: none;\n}\n\n/* \n -When we focus, but aren‚Äôt hovering the thumb: we show the focus ring we added earlier.\n \n -When the whole thing is disabled, we‚Äôre just making it grayscale and adding a handy not-allowed cursor. \n */\n:focus + .toggle__decor:not(:hover) .toggle__thumb::before {\n  display: block;\n}\n\n:disabled + .toggle__decor {\n  filter: grayscale(1) brightness(1.5);\n  cursor: not-allowed;\n}\n"]}